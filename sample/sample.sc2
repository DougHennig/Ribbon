*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="sample.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	*<PropValue>
		DataSource = .NULL.
		Height = 0
		Left = 0
		Name = "Dataenvironment"
		Top = 0
		Width = 0
	*</PropValue>

ENDDEFINE

DEFINE CLASS form1 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oRibbon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTheme" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTheme" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: showtabsonly		&& Called when the ribbon shows tabs only or the full ribbon
		*m: somemethod
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BackColor = 255,255,255
		Caption = "Ribbon Test Form"
		Desktop = .T.
		DoCreate = .T.
		Height = 478
		Left = 0
		Name = "Form1"
		ShowWindow = 2
		Top = 0
		Width = 841
		_memberdata = <VFPData>
			<memberdata name="somemethod" display="SomeMethod"/>
			<memberdata name="showtabsonly" display="ShowTabsOnly"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cboTheme' AS combobox WITH ;
		ControlSource = "Thisform.oRibbon.Theme", ;
		FontName = "Segoe UI", ;
		Height = 24, ;
		Left = 110, ;
		Name = "cboTheme", ;
		RowSource = "Thisform.oRibbon.Themes", ;
		RowSourceType = 10, ;
		Style = 2, ;
		Top = 165, ;
		Width = 100
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'lblTheme' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Ribbon theme", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 20, ;
		Name = "lblTheme", ;
		Top = 169, ;
		Width = 77
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oRibbon' AS sfribbon WITH ;
		Left = 0, ;
		Name = "oRibbon", ;
		Top = 0, ;
		Width = 450, ;
		linBottom.Name = "linBottom", ;
		Line1.Name = "Line1", ;
		Line2.Name = "Line2", ;
		Line3.Name = "Line3", ;
		Line4.Name = "Line4", ;
		Line5.Name = "Line5", ;
		tmrClick.Name = "tmrClick", ;
		RIBBONDISPLAYBUTTON.Height = 16, ;
		RIBBONDISPLAYBUTTON.IMGBUTTON.Height = 16, ;
		RIBBONDISPLAYBUTTON.IMGBUTTON.Name = "IMGBUTTON", ;
		RIBBONDISPLAYBUTTON.IMGBUTTON.Width = 16, ;
		RIBBONDISPLAYBUTTON.Name = "RIBBONDISPLAYBUTTON", ;
		RIBBONDISPLAYBUTTON.Width = 16
		*< END OBJECT: ClassLib="..\sfribbon.vcx" BaseClass="container" />
	
	PROCEDURE Init
		lcImagePath = sys(16)
		lcImagePath = addbs(justpath(substr(lcImagePath, at(' ', lcImagePath, 2) + 1)))
		with This.oRibbon
		
		* Display the RibbonDisplay button.
		
			.AllowShowTabsOnly = .T.
		
		*** TODO: support special "File" tab
		
		* Set up the Home tab.
		
			loTab = .AddTab('Home')
			with loTab
				.Caption = 'Home'
		
		* Set up the New section.
		
				loSection = .AddSection()
				with loSection
					.Caption = 'New'
					loButton = .AddButton()
					with loButton
						.Caption = 'New' + chr(13) + 'Email'
						.Image   = lcImagePath + 'newemail.png'
						.Command = "messagebox('New email')"
					endwith
					loButton = .AddButton('NewItems')
					with loButton
						.Caption = 'New' + chr(13) + 'Items'
						.Image   = lcImagePath + 'newitems.png'
						.AddBar('E-\<mail Message', 'Thisform.SomeMethod()', ;
							lcImagePath + 'newemailsmall.png')
							&& call Thisform.SomeMethod as a command
						loBar = .AddBar('\<Appointment', '', ;
							lcImagePath + 'appointmentsmall.png')
						bindevent(loBar, 'OnClick', This, 'SomeMethod')
							&& use BINDEVENT to execute Thisform.SomeMethod
						.AddBar('M\<eeting', "messagebox('Meeting')", ;
							lcImagePath + 'meetingsmall.png')
						.AddBar('Gro\<up', "messagebox('Group')", ;
							lcImagePath + 'groupsmall.png')
						.AddBar('\<Contact', "messagebox('Contact')", ;
							lcImagePath + 'contactsmall.png')
						.AddBar('\<Task', "messagebox('Task')", ;
							lcImagePath + 'tasksmall.png')
						.AddBar()
						loBar = .AddBar('E-mail Message \<Using')
						loBar.AddBar('\<More Stationery...', "messagebox('More stationery')")
						loBar.AddBar()
						loBar.AddBar('\<Plain Text')
						loBar.AddBar('\<Rich Text')
						loBar.AddBar('\<HTML')
						loBar = .AddBar('More \<Items', "messagebox('More Items')")
						loBar.AddBar('\<Post in This Folder')
						loBar.AddBar('Contact \<Group')
						loBar.AddBar('Task Re\<quest')
						.AddBar('Teams Meeti\<ng', "messagebox('Teams Meeting')", ;
							lcImagePath + 'teamsmeetingsmall.png')
					endwith
				endwith
		
		* Set up the Delete section.
		
				loSection = .AddSection()
				with loSection
					.Caption = 'Delete'
					loButton = .AddHorizontalButton()
					with loButton
						.Caption = 'Ignore'
						.Image   = lcImagePath + 'ignore.png'
					endwith
					loButton = .AddHorizontalButton()
					with loButton
						.Caption = 'Clean Up'
						.Image   = lcImagePath + 'cleanup.png'
						.AddBar('\<Clean Up Conversation', , lcImagePath + 'cleanup.png')
						.AddBar('\<Clean Up Folder')
						.AddBar('\<Clean Up Folder & Subfolders')
					endwith
					loButton = .AddHorizontalButton()
					with loButton
						.Caption = 'Junk'
						.Image   = lcImagePath + 'junk.png'
						.AddBar('\<Block Sender', , lcImagePath + 'junk.png')
						.AddBar('Never Block \<Sender')
						.AddBar("Never Block Sender's \<Domain (@example.com)")
						.AddBar('Never Block this Group or \<Mailing List')
						.AddBar()
						.AddBar('\<Not Junk', , lcImagePath + 'newemailsmall.png', '.F.')
							&& .F. is passed as a string because it's an expression
							&& that's evaluated
						.AddBar('Junk E-mail \<Options...')
					endwith
					loButton = .AddButton()
					with loButton
						.Caption           = 'Delete'
						.Image             = lcImagePath + 'delete.png'
						.EnabledExpression = '.F.'
					endwith
					loButton = .AddButton()
					with loButton
						.Caption = 'Archive'
						.Image   = lcImagePath + 'archive.png'
					endwith
				endwith
		
		* Set up the Configurations section.
		
				loSection = .AddSection()
				with loSection
					.Caption = 'Configuration'
					loButton = .AddButton()
					with loButton
						.Caption = ''
						.Image   = lcImagePath + 'options.png'
					endwith
				endwith
		
		* Set up the Move section.
		
				loSection = .AddSection()
				with loSection
					.Caption = 'Move'
					loButton = .AddButton(, 'SFRibbonToolbarButton')
					with loButton
						.Caption = 'Move'
						.Image   = lcImagePath + 'move.png'
						.AddBar('Inbox')
						.AddBar()
						.AddBar('\<Other Folder...')
						.AddBar('\<Copy to Folder...')
					endwith
					loButton = .AddButton(, 'SFRibbonToolbarButton')
					with loButton
						.Caption = 'Rules'
						.Image   = lcImagePath + 'rules.png'
						.AddBar('Always move messages from: whoever@whatever.com')
						.AddBar()
						.AddBar('Create R\<ule...')
						.AddBar('Manage Ru\<les & Alerts...')
					endwith
		
		* Add a textbox to the section to show that the ribbon can support other types
		* of controls besides buttons. We have to manually call CalculateWidth to
		* adjust the section width.
		
					loControl = .AddControl('Test', 'textbox', '')
					with loControl
						.FontName = 'Segoe UI'
						.Width    = 200
						.Height   = 24
						.Top      = int((loSection.Height - .Height)/2)
							&& center it vertically
					endwith
					.CalculateWidth()
				endwith
			endwith
		
		* Set up the Send/Receive tab.
		
			loTab = .AddTab()
			with loTab
				.Caption = 'Send / Receive'
		
		* Set up the Send & Receive section.
		
				loSection = .AddSection()
				with loSection
					.Caption = 'Send & Receive'
					loButton = .AddButton()
					with loButton
						.Caption = 'Send/Receive' + chr(13) + 'All Folders'
						.Image   = lcImagePath + 'sendreceive.png'
					endwith
					loButton = .AddHorizontalButton()
					with loButton
						.Caption = 'Update Folder'
						.Image   = lcImagePath + 'updatefoldersmall.png'
					endwith
					loButton = .AddHorizontalButton()
					with loButton
						.Caption = 'Send All'
						.Image   = lcImagePath + 'sendallsmall.png'
					endwith
					loButton = .AddHorizontalButton()
					with loButton
						.Caption = 'Send/Receive Groups'
						.Image   = lcImagePath + 'updatefoldersmall.png'
					endwith
				endwith
		
		* Set up the Download section.
		
				loSection = .AddSection()
				with loSection
					.Caption = 'Download'
					loButton = .AddButton()
					with loButton
						.Caption = 'Show' + chr(13) + 'Progress'
						.Image   = lcImagePath + 'showprogress.png'
					endwith
					loButton = .AddButton()
					with loButton
						.Caption = 'Cancel' + chr(13) + 'All'
						.Image   = lcImagePath + 'cancelall.png'
					endwith
				endwith
			endwith
		
		* Add a shortcut menu to the ribbon.
		
			.AddBar('Change Theme to Colorful', ;
				"Thisform.oRibbon.Theme = 'Colorful'" + chr(13) + "Thisform.Refresh()", , ;
				"Thisform.oRibbon.Theme <> 'Colorful'")
			.AddBar('Change Theme to Dark Grey', ;
				"Thisform.oRibbon.Theme = 'Dark Grey'" + chr(13) + "Thisform.Refresh()", , ;
				"Thisform.oRibbon.Theme <> 'Dark Grey'")
		
		* Auto-select the Home tab.
		
			.Home.Selected = .T.
		endwith
		
		* Bind the ribbon's ShowTabsOnly event so we can adjust object positions.
		
		bindevent(This.oRibbon, 'OnShowTabsOnly', This, 'ShowTabsOnly')
		
	ENDPROC

	PROCEDURE QueryUnload
		clear events
		
	ENDPROC

	PROCEDURE showtabsonly		&& Called when the ribbon shows tabs only or the full ribbon
		lparameters tlShowTabsOnly
		if tlShowTabsOnly
			This.lblTheme.Top = 69
			This.cboTheme.Top = 65
		else
			This.lblTheme.Top = 169
			This.cboTheme.Top = 165
		endif tlShowTabsOnly
		
	ENDPROC

	PROCEDURE somemethod
		lnEvents = aevents(laEvents, 0)
		if lnEvents = 0
			messagebox('This is some form method called as a command')
		else
			messagebox('This is some form method called using BINDEVENT to OnClick')
		endif lnEvents = 0
		
	ENDPROC

ENDDEFINE
